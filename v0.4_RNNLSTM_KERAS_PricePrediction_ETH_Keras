#Bertreft eigen implementatie op basis van youtube tutorial: https://www.youtube.com/watch?v=G5Mx7yYdEhE

#1 - importeren van de benodigde bibliotheken
from keras.layers.core import Dense, Activation, Dropout
from keras.layers.recurrent import LSTM
from keras.layers import Bidirectional
from keras.models import Sequential
from keras.models import load_model

from sklearn.metrics import mean_squared_error
import time
import numpy as np
import math
import matplotlib.pyplot as plt
import pandas as pd

#2 - Functie voor het laden van de data
def load_data(filename, sequence_length):
    #Leest het data bestand
    raw_data = pd.read_csv(filename, delimiter=",", dtype=float).values
    #Verander de nullen in de waarde voorafgaand aan de betreffende nul
    for x in range(0, raw_data.shape[0]):
        for y in range(0, raw_data.shape[1]):
            if raw_data[x][y] == 0:
                raw_data[x][y] = raw_data[x-1][y]
    #Omzetten van de data in een lijst
    data = raw_data.tolist()
    #Omzetten data naar een 3D array (a*b*c), met a=aantal dagen, b=window size en d=aantal features in het databestand
    result = []
    for index in range(len(data) + 1 - sequence_length):
        result.append(data[index: index + sequence_length])
    #Normaliseren van de data voor iedere groep(window), door iedere waarde in een groep te delen door de eerste waarde
    #van de groep en vervolgens hier 1 af te trekken
    d0 = np.array(result)
    dr = np.zeros_like(d0)
    dr[:, 1:, :] = d0[:, 1:, :] / d0[:, 0:1, :] - 1
    #Bewaren van de ongenormaliseerde waardes voor Y_test, ten behoeve van de grafiek later
    start = round(0.9 * dr.shape[0])
    end = int(dr.shape[0] + 1)
    unnormalized_bases = d0[start:end, 0:1, 3]
    #Verdelen van de data naar training en test (eerste 90% is training)
    split_line = round(0.9 * dr.shape[0])
    training_data = dr[:int(split_line), :]
    #Shuffle van de data
    np.random.shuffle(training_data)
    #Training data specificeren
    X_train = training_data[:, :-1]
    Y_train1 = training_data[:, -1]
    Y_train = Y_train1[:, 3]
    #Test data specificeren
    X_test = dr[int(split_line):, :-1]
    Y_test = dr[int(split_line):, 49, :]
    Y_test = Y_test[:, 3]
    #Dag voorgaand opslaan voor Y_test prijzen
    Y_daybefore = dr[int(split_line):, 48, :]
    Y_daybefore = Y_daybefore[:, 3]
    #Verkrijgen van de window size en sequence length
    sequence_length = sequence_length
    window_size = sequence_length - 1

    return X_train, Y_train, X_test, Y_test, Y_daybefore, unnormalized_bases, window_size

#3 - Bouw model in Keras (tensorflow), 3 laags RNN Bidirectional LSTM netwerk
def initialize_model(window_size, dropout_value, activation_function, loss_function, optimizer):
    #Bouw sequential (volgordelijk) model in Keras
    model = Sequential()
    #Bouw 1e recurrent laag met dropout
    model.add(Bidirectional(LSTM((window_size*2), return_sequences=True), input_shape=(window_size, X_train.shape[-1]),))
    model.add(Dropout(dropout_value))
    #Bouw 2e recurrent laag met dropout
    model.add(Bidirectional(LSTM((window_size * 2), return_sequences=True)))
    model.add(Dropout(dropout_value))
    #Bouw 3e recurrent laag zonder dropout
    model.add(Bidirectional(LSTM(window_size, return_sequences=False)))
    #Bouw output laag met 1 unit gezien het
    model.add(Dense(units=1))
    #Activatie functie invoeren
    model.add(Activation(activation_function))
    #loss functie en optimizer invoeren
    model.compile(loss=loss_function, optimizer=optimizer)

    return model

#4 - Training van het model
def fit_model(model, X_train, Y_train, batch_num, num_epoch, val_split):
    #Opslaan van de tijd dat het model start met trainen
    start = time.time()
    #Model trainen op X_train en Y_train
    model.fit(x=X_train, y=Y_train, batch_size=batch_num, epochs=num_epoch, validation_split=val_split)
    #Opslaan van de tijd hoe lang over de training is gedaan
    training_time = int(math.floor(time.time() - start))

    return model, training_time

#5 - Test van het model
def test_model(model, X_test, Y_test, unnormalized_bases):
    #Test van het model op de testwaarden X_test
    Y_predict = model.predict(X_test)
    #Bouw van een leeg 2D array voor de ongenormaliseerde waardes
    real_Y_test = np.zeros_like(Y_test)
    real_Y_predict = np.zeros_like(Y_predict)
    #Vullen van bovenstaande lege 2D arrays
    for i in range(Y_test.shape[0]):
        y = Y_test[i]
        predict = Y_predict[i]
        real_Y_test[i] = (y + 1) * unnormalized_bases[i]
        real_Y_predict[i] = (predict + 1) * unnormalized_bases[i]
    #Plotten van de voorspelde prijs ten opzichte van de werkelijke prijs
    fig = plt.figure(figsize=(10, 5))
    ax = fig.add_subplot(111)
    ax.set_title("ETH Price Over Time")
    plt.plot(real_Y_predict, color='green', label='Predicted Price')
    plt.plot(real_Y_test, color='red', label='Real Price')
    plt.ylabel("Price (USD)")
    plt.xlabel("Time (Days)")
    ax.legend()

    return Y_predict, real_Y_test, real_Y_predict, fig

#6 - Evaluatie verandering van de prijs
def price_change(Y_daybefore, Y_test, Y_predict):
    #Hervorem van Y_daybefore en Y_test
    Y_daybefore = np.reshape(Y_daybefore, (-1, 1))
    Y_test = np.reshape(Y_test, (-1, 1))
    #Verschil tussen voorspelde prijs en prijs dag ervoor bepalen
    delta_predict = (Y_predict - Y_daybefore) / (1 + Y_daybefore)
    #Verschil tussen werkelijke prijs en prijs dag ervoor
    delta_real = (Y_test - Y_daybefore) / (1 + Y_daybefore)
    #Plotten van de voorspelde verandering ten opzichte van de werkelijke
    fig = plt.figure(figsize=(10, 6))
    ax = fig.add_subplot(111)
    ax.set_title("Percentage veranderd in ETH" + "Price Per Dag")
    plt.plot(delta_predict, color='green', label='Predicted Percent Change')
    plt.plot(delta_real, color='red', label='Real Percent Change')
    plt.ylabel("Percent Change")
    plt.xlabel("Time (Days)")
    ax.legend()
    plt.show()

    return Y_daybefore, Y_test, delta_predict, delta_real, fig

#7 - Verwerken van percentage verschil per dag
def binary_price(delta_predict, delta_real):
    #Leeg array met waarde 0 daling en waarde 1 stijging
    delta_predict_1_0 = np.empty(delta_predict.shape)
    delta_real_1_0 = np.empty(delta_real.shape)
    #Verandering groter dan 0 dan 1 en kleiner of gelijk aan 0 dan 0
    for i in range(delta_predict.shape[0]):
        if delta_predict[i][0] > 0:
            delta_predict_1_0[i][0] = 1
        else:
            delta_predict_1_0[i][0] = 0
    for i in range(delta_real.shape[0]):
        if delta_real[i][0] > 0:
            delta_real_1_0[i][0] = 1
        else:
            delta_real_1_0[i][0] = 0

    return delta_predict_1_0, delta_real_1_0

#8 - Vergelijken voorspelde beweging en werkelijke (op basis van voorgaande binaire verschillen)
def find_positives_negatives(delta_predict_1_0, delta_real_1_0):
    true_pos = 0
    false_pos = 0
    true_neg = 0
    false_neg = 0
    for i in range(delta_real_1_0.shape[0]):
        real = delta_real_1_0[i][0]
        predicted = delta_predict_1_0[i][0]
        if real == 1:
            if predicted == 1:
                true_pos += 1
            else:
                false_neg += 1
        if real == 0:
            if predicted == 0:
                true_neg += 1
            else:
                false_pos += 1

    return true_pos, false_pos, true_neg, false_neg

#9 - Statistiek voor de berekening van kengetallen (als nauwkeurigheid)
def calculate_statistics(true_pos, false_pos, true_neg, false_neg, Y_predict, Y_test):
    precision = float(true_pos) / (true_pos + false_pos)
    recall = float(true_pos) / (true_pos + false_neg)
    F1 = float(2 * precision * recall) / (precision + recall)
    #Berekenen van MSE
    MSE = mean_squared_error(Y_predict.flatten(), Y_test.flatten())

    return precision, recall, F1, MSE

#10 - Uitvoeren van voorgaande code

    #Laden van de data
X_train, Y_train, X_test, Y_test, Y_daybefore, unnormalized_bases, window_size = load_data("eth2.csv", 50)
#print(X_train.shape)
#print(Y_train.shape)
#print(X_test.shape)
#print(Y_test.shape)
#print(Y_daybefore.shape)
#print(unnormalized_bases.shape)
#print(window_size)

    #Initialiseren van het model
model = initialize_model(window_size, 0.2, "linear", "mse", "adam")
#print(model.summary())

    #Trainen van het model
#model, training_time = fit_model(model, X_train, Y_train, 1024, 1, 0.05) #TE GEBRUIKEN BIJ EEN EERSTE RUN (ZONDER BESTAND)

model_saved_train = load_model('model_trainingPP_ETH.h5')
model, training_time = fit_model(model_saved_train, X_train, Y_train, 1024, 10, 0.05)
print("Training_time ", training_time, " seconds")

model.save("model_trainingPP_ETH.h5") #maakt een HDF5 bestand met het 'getrainde model'
del model #verwijderd het eerder opgeslagen model (met overeenkomstige naam)

    #Test van het model
model_saved_test = load_model('model_trainingPP_ETH.h5')
Y_predict, real_Y_test, real_Y_predict, fig1 = test_model(model_saved_test, X_test, Y_test, unnormalized_bases)
plt.show(fig1)

    #Plotten percentage verandering
Y_daybefore, Y_test, delta_predict, delta_real, fig2 = price_change(Y_daybefore, Y_test, Y_predict)
plt.show(fig2)

    #Vergelijken binaire voorspelling voor nauwkeurigheid
delta_predict_1_0, delta_real_1_0 = binary_price(delta_predict, delta_real)
true_pos, false_pos, true_neg, false_neg = find_positives_negatives(delta_predict_1_0, delta_real_1_0)
print("True positives:", true_pos)
print("False positives:", false_pos)
print("True negatives:", true_neg)
print("False negatives:", false_neg)

    #Statistieken printen
precision, recall, F1, MSE = calculate_statistics(true_pos, false_pos, true_neg, false_neg, Y_predict, Y_test)
print("Precision:", precision)
print("Recall:", recall)
print("F1 score:", F1)
print("Mean Squared Error:", MSE)
print("")

print("Laatste prijs beschikbaar:", real_Y_test[-1])
print("Voorspelde prijs morgen:", real_Y_predict[-1])
print("Voorspelde beweging morgen (1. = omhoog en 0. is omlaag/gelijk):", delta_predict_1_0[-1])
